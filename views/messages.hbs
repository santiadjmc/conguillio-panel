<div class="chat-container">
    <!-- Enhanced Chat Header -->
    <header class="chat-header">
        <div class="user-info">
            <div class="user-avatar-container">
                <img class="user-avatar" src="{{target.avatar}}" alt="{{target.name}}">
                <div class="status-indicator {{target.status}}" id="status-indicator"></div>
            </div>
            <div class="user-details">
                <h3 class="user-name">{{target.name}}</h3>
                <p class="user-status-text" id="status-text">
                    <i class="fas fa-circle status-dot {{target.status}}"></i>
                    <span id="status-label">{{target.status}}</span>
                </p>
            </div>
        </div>
        
        <div class="chat-actions">
            <button class="action-btn" title="Buscar mensajes">
                <i class="fas fa-search"></i>
            </button>
            <button class="action-btn" title="Configuración">
                <i class="fas fa-cog"></i>
            </button>
            <button class="action-btn" title="Más opciones">
                <i class="fas fa-ellipsis-v"></i>
            </button>
        </div>
    </header>

    <!-- Enhanced Chat Messages Area -->
    <main class="chat-main">
        <div class="chat-messages" id="chat-messages">
            {{#if messages.length}}
                <button class="load-more-btn btn btn-ghost" id="load-more-messages">
                    <i class="fas fa-history"></i>
                    Cargar mensajes anteriores
                </button>
                
                <div class="messages-container">
                    {{#each messages}}
                    <div class="message-wrapper">
                        <div class="chat-message {{#if this.isOwn}}own{{/if}}">
                            {{#unless this.isOwn}}
                            <img class="message-avatar" src="{{this.avatar}}" alt="{{this.name}}" loading="lazy">
                            {{/unless}}
                            
                            <div class="message-content">
                                {{#unless this.isOwn}}
                                <div class="message-header">
                                    <span class="message-author">{{this.username}}</span>
                                    <span class="message-time">{{formatDate this.created_at}}</span>
                                </div>
                                {{/unless}}
                                
                                <div class="message-bubble {{#if this.isOwn}}own{{/if}}" id="msg-{{this.id}}">
                                    <div class="message-text" id="cnt-{{this.id}}">
                                        {{{this.content}}}
                                    </div>
                                    {{#if this.isOwn}}
                                    <div class="message-time">{{formatDate this.created_at}}</div>
                                    {{/if}}
                                </div>
                            </div>
                            
                            {{#if this.isOwn}}
                            <img class="message-avatar own" src="{{this.avatar}}" alt="{{this.name}}" loading="lazy">
                            {{/if}}
                        </div>
                    </div>
                    {{/each}}
                </div>
            {{else}}
                <div class="no-messages animate-fade-in">
                    <div class="no-messages-icon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <h3>¡Comienza una conversación!</h3>
                    <p>No hay mensajes aún. Sé el primero en escribir algo increíble.</p>
                </div>
            {{/if}}
        </div>
        
        <!-- Typing Indicator Area -->
        <div class="typing-container" id="typing-container" style="display: none;">
            <div class="typing-indicator">
                <div class="typing-avatar">
                    <img src="/img/barnie_avatar.png" alt="BarnieBot">
                </div>
                <div class="typing-bubble">
                    <div class="typing-dots">
                        <div class="dot"></div>
                        <div class="dot"></div>
                        <div class="dot"></div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Enhanced Chat Input -->
    <footer class="chat-input-area">
        <div class="input-container">
            <div class="input-wrapper">
                <input type="text" 
                       class="chat-input" 
                       placeholder="Escribe un mensaje increíble..."
                       autocomplete="off" 
                       autofocus 
                       id="chat-input-text">
                
                <div class="input-actions">
                    {{#if target.id}}
                    <div class="ai-toggle" title="Activar/Desactivar IA">
                        <label class="toggle-switch">
                            <input type="checkbox" id="ai-input-btn">
                            <span class="toggle-slider">
                                <i class="fas fa-robot"></i>
                            </span>
                        </label>
                    </div>
                    {{/if}}
                    
                    <button type="button" class="input-btn voice-btn" id="voice-input" title="Entrada por voz">
                        <i class="fas fa-microphone"></i>
                    </button>
                    
                    <button type="button" class="input-btn attach-btn" title="Adjuntar archivo">
                        <i class="fas fa-paperclip"></i>
                    </button>
                </div>
            </div>
            
            <button type="button" class="send-btn" id="chat-input-button" title="Enviar mensaje">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </footer>
</div>

<!-- Navigation Controls -->
<div class="chat-navigation">
    <button class="nav-btn scroll-top" id="scroll-top" title="Ir al inicio">
        <i class="fas fa-arrow-up"></i>
    </button>
    
    <button class="nav-btn scroll-bottom" id="scroll-bottom" title="Ir al final">
        <i class="fas fa-arrow-down"></i>
    </button>
    
    <div class="unread-counter" id="unread-counter" style="display: none;">
        <span id="unread-count">0</span>
    </div>
</div>

<style>
    /* ===== MODERN CHAT INTERFACE ===== */
    
    .chat-container {
        height: calc(100vh - 70px);
        display: flex;
        flex-direction: column;
        background: var(--dark-bg);
        overflow: hidden;
    }

    /* ===== CHAT HEADER ===== */
    .chat-header {
        background: var(--dark-surface);
        border-bottom: 2px solid var(--primary-blue);
        padding: var(--space-lg) var(--space-xl);
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: var(--shadow-md);
        position: relative;
        z-index: 10;
    }

    .chat-header::before {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background: var(--primary-gradient);
        animation: slideInFromLeft 0.6s ease;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: var(--space-lg);
    }

    .user-avatar-container {
        position: relative;
    }

    .user-avatar {
        width: 50px;
        height: 50px;
        border-radius: var(--radius-full);
        border: 3px solid var(--primary-blue);
        object-fit: cover;
        transition: all var(--transition-normal);
    }

    .user-avatar:hover {
        transform: scale(1.1);
        border-color: var(--secondary-blue);
        box-shadow: var(--shadow-glow);
    }

    .status-indicator {
        position: absolute;
        bottom: 2px;
        right: 2px;
        width: 16px;
        height: 16px;
        border-radius: var(--radius-full);
        border: 3px solid var(--dark-surface);
        animation: pulse 2s infinite;
    }

    .status-indicator.online {
        background: var(--success);
    }

    .status-indicator.offline {
        background: var(--error);
    }

    .user-details {
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .user-name {
        margin: 0;
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--text-primary);
    }

    .user-status-text {
        display: flex;
        align-items: center;
        gap: var(--space-xs);
        color: var(--text-secondary);
        font-size: 0.9rem;
        margin: 0;
    }

    .status-dot {
        font-size: 0.6rem;
    }

    .status-dot.online {
        color: var(--success);
    }

    .status-dot.offline {
        color: var(--error);
    }

    .chat-actions {
        display: flex;
        gap: var(--space-sm);
    }

    .action-btn {
        width: 40px;
        height: 40px;
        border-radius: var(--radius-full);
        background: var(--dark-elevated);
        border: 1px solid var(--dark-border);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .action-btn:hover {
        background: var(--primary-blue);
        color: white;
        transform: scale(1.1);
    }

    /* ===== CHAT MAIN AREA ===== */
    .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        position: relative;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: var(--space-lg);
        display: flex;
        flex-direction: column;
        gap: var(--space-lg);
        scroll-behavior: smooth;
        background: linear-gradient(135deg, rgba(26, 35, 126, 0.02) 0%, rgba(40, 53, 147, 0.02) 100%);
    }

    .load-more-btn {
        align-self: center;
        margin-bottom: var(--space-lg);
    }

    .messages-container {
        display: flex;
        flex-direction: column;
        gap: var(--space-lg);
    }

    .message-wrapper {
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
    }

    .chat-message {
        display: flex;
        gap: var(--space-md);
        max-width: 80%;
        animation: messageSlideIn 0.3s ease;
    }

    .chat-message.own {
        align-self: flex-end;
        flex-direction: row-reverse;
    }

    @keyframes messageSlideIn {
        from {
            opacity: 0;
            transform: translateY(20px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    .message-avatar {
        width: 35px;
        height: 35px;
        border-radius: var(--radius-full);
        border: 2px solid var(--dark-border);
        object-fit: cover;
        flex-shrink: 0;
        transition: all var(--transition-normal);
    }

    .message-avatar:hover {
        transform: scale(1.2) rotate(5deg);
        border-color: var(--primary-blue);
    }

    .message-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--space-xs);
    }

    .message-header {
        display: flex;
        align-items: center;
        gap: var(--space-sm);
    }

    .message-author {
        font-weight: 600;
        color: var(--text-primary);
        font-size: 0.9rem;
    }

    .message-time {
        font-size: 0.75rem;
        color: var(--text-muted);
    }

    .message-bubble {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-lg);
        padding: var(--space-md) var(--space-lg);
        position: relative;
        transition: all var(--transition-normal);
        word-wrap: break-word;
    }

    .message-bubble:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-md);
    }

    .message-bubble.own {
        background: var(--primary-gradient);
        color: white;
        border: none;
    }

    .message-bubble::before {
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        border-style: solid;
    }

    .message-bubble:not(.own)::before {
        top: 15px;
        left: -8px;
        border-width: 8px 8px 8px 0;
        border-color: transparent var(--dark-surface) transparent transparent;
    }

    .message-bubble.own::before {
        top: 15px;
        right: -8px;
        border-width: 8px 0 8px 8px;
        border-color: transparent transparent transparent var(--primary-blue);
    }

    .message-text {
        line-height: 1.5;
    }

    .message-bubble.own .message-time {
        color: rgba(255,255,255,0.8);
        text-align: right;
        margin-top: var(--space-sm);
        font-size: 0.7rem;
    }

    /* ===== NO MESSAGES STATE ===== */
    .no-messages {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: var(--space-2xl);
        flex: 1;
    }

    .no-messages-icon {
        width: 80px;
        height: 80px;
        background: var(--primary-gradient);
        border-radius: var(--radius-full);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        color: white;
        margin-bottom: var(--space-lg);
        animation: pulse 2s infinite;
    }

    .no-messages h3 {
        color: var(--text-primary);
        margin-bottom: var(--space-sm);
        font-size: 1.5rem;
    }

    .no-messages p {
        color: var(--text-secondary);
        margin: 0;
    }

    /* ===== TYPING INDICATOR ===== */
    .typing-container {
        padding: 0 var(--space-lg) var(--space-sm);
        animation: fadeIn 0.3s ease;
    }

    .typing-indicator {
        display: flex;
        align-items: center;
        gap: var(--space-md);
    }

    .typing-avatar {
        width: 35px;
        height: 35px;
    }

    .typing-avatar img {
        width: 100%;
        height: 100%;
        border-radius: var(--radius-full);
        border: 2px solid var(--primary-blue);
        object-fit: cover;
    }

    .typing-bubble {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-lg);
        padding: var(--space-md) var(--space-lg);
        position: relative;
    }

    .typing-bubble::before {
        content: '';
        position: absolute;
        top: 15px;
        left: -8px;
        width: 0;
        height: 0;
        border-style: solid;
        border-width: 8px 8px 8px 0;
        border-color: transparent var(--dark-surface) transparent transparent;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
    }

    .typing-dots .dot {
        width: 8px;
        height: 8px;
        background: var(--primary-blue);
        border-radius: var(--radius-full);
        animation: typingDot 1.5s infinite;
    }

    .typing-dots .dot:nth-child(2) {
        animation-delay: 0.2s;
    }

    .typing-dots .dot:nth-child(3) {
        animation-delay: 0.4s;
    }

    @keyframes typingDot {
        0%, 60%, 100% {
            transform: scale(1);
            opacity: 0.7;
        }
        30% {
            transform: scale(1.3);
            opacity: 1;
        }
    }

    /* ===== CHAT INPUT AREA ===== */
    .chat-input-area {
        background: var(--dark-surface);
        border-top: 1px solid var(--dark-border);
        padding: var(--space-lg);
        box-shadow: var(--shadow-lg);
    }

    .input-container {
        display: flex;
        gap: var(--space-md);
        align-items: flex-end;
    }

    .input-wrapper {
        flex: 1;
        background: var(--dark-elevated);
        border: 2px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--space-md);
        display: flex;
        align-items: center;
        gap: var(--space-md);
        transition: all var(--transition-normal);
    }

    .input-wrapper:focus-within {
        border-color: var(--primary-blue);
        box-shadow: 0 0 0 3px rgba(26, 35, 126, 0.1);
    }

    .chat-input {
        flex: 1;
        background: transparent;
        border: none;
        outline: none;
        color: var(--text-primary);
        font-size: 1rem;
        padding: var(--space-sm) 0;
        resize: none;
        max-height: 120px;
    }

    .chat-input::placeholder {
        color: var(--text-muted);
    }

    .input-actions {
        display: flex;
        gap: var(--space-sm);
        align-items: center;
    }

    .ai-toggle {
        display: flex;
        align-items: center;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
        cursor: pointer;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .toggle-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--dark-border);
        border-radius: var(--radius-full);
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .toggle-slider i {
        font-size: 0.8rem;
        color: var(--text-muted);
        transition: all var(--transition-normal);
    }

    .toggle-switch input:checked + .toggle-slider {
        background: var(--primary-gradient);
    }

    .toggle-switch input:checked + .toggle-slider i {
        color: white;
        transform: scale(1.2);
    }

    .input-btn {
        width: 35px;
        height: 35px;
        border-radius: var(--radius-full);
        background: transparent;
        border: 1px solid var(--dark-border);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .input-btn:hover {
        background: var(--primary-blue);
        color: white;
        transform: scale(1.1);
    }

    .send-btn {
        width: 50px;
        height: 50px;
        border-radius: var(--radius-full);
        background: var(--primary-gradient);
        border: none;
        color: white;
        cursor: pointer;
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.1rem;
        box-shadow: var(--shadow-md);
    }

    .send-btn:hover {
        transform: scale(1.1);
        box-shadow: var(--shadow-glow);
    }

    .send-btn:active {
        transform: scale(0.95);
    }

    /* ===== NAVIGATION CONTROLS ===== */
    .chat-navigation {
        position: fixed;
        bottom: var(--space-xl);
        right: var(--space-xl);
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
        z-index: 1000;
    }

    .nav-btn {
        width: 50px;
        height: 50px;
        border-radius: var(--radius-full);
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all var(--transition-normal);
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-lg);
        opacity: 0;
        visibility: hidden;
    }

    .nav-btn.show {
        opacity: 1;
        visibility: visible;
    }

    .nav-btn:hover {
        background: var(--primary-blue);
        color: white;
        transform: scale(1.1);
    }

    .unread-counter {
        background: var(--error);
        color: white;
        border-radius: var(--radius-full);
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        font-weight: 600;
        box-shadow: var(--shadow-md);
        animation: bounce 1s infinite;
    }

    /* ===== RESPONSIVE DESIGN ===== */
    @media (max-width: 768px) {
        .chat-container {
            height: calc(100vh - 70px);
        }

        .chat-header {
            padding: var(--space-md);
        }

        .user-name {
            font-size: 1.1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
        }

        .chat-messages {
            padding: var(--space-md);
        }

        .chat-message {
            max-width: 90%;
        }

        .chat-input-area {
            padding: var(--space-md);
        }

        .input-wrapper {
            padding: var(--space-sm);
        }

        .chat-navigation {
            bottom: var(--space-lg);
            right: var(--space-lg);
        }

        .nav-btn {
            width: 45px;
            height: 45px;
        }
    }
</style>

<script>
    // Enhanced Modern Chat Interface Script
    let ai_status = false;
    let unreadMessages = 0;
    let userStatus = "{{target.status}}";
    let ai_msg_id = 0;
    let gotTyping = false;
    let aiTyping = false;
    let lastScrollHeight = 0;
    let focused = true;

    // Enhanced scroll functionality
    function scrollToBottom(smooth = true) {
        const chatMessages = document.querySelector('.chat-messages');
        if (chatMessages) {
            chatMessages.scrollTo({
                top: chatMessages.scrollHeight,
                behavior: smooth ? 'smooth' : 'auto'
            });
        }
    }

    // Ensure messages container exists (handles empty threads gracefully)
    function getOrCreateMessagesContainer() {
        let container = document.querySelector('.messages-container');
        if (!container) {
            // Remove empty state if present
            const noMessages = document.querySelector('.no-messages');
            if (noMessages) noMessages.remove();

            // Create a new messages container inside the chat messages area
            const chatMessages = document.getElementById('chat-messages');
            if (chatMessages) {
                container = document.createElement('div');
                container.className = 'messages-container';
                chatMessages.appendChild(container);
            }
        }
        return container;
    }

    // Enhanced typing indicator
    function updateAiTyping(status) {
        const typingContainer = document.getElementById('typing-container');
        if (status) {
            typingContainer.style.display = 'block';
            scrollToBottom();
        } else {
            typingContainer.style.display = 'none';
        }
    }

    // Enhanced message sending
    async function sendMessage() {
        const input = document.getElementById('chat-input-text');
        const text = input.value.trim();
        
        if (text.length === 0) return;
        
        const frontEndMsgId = Date.now();
        input.value = '';
        
        // Show sending animation
        const sendBtn = document.getElementById('chat-input-button');
        const originalIcon = sendBtn.innerHTML;
        sendBtn.innerHTML = '<div class="spinner-sm"></div>';
        sendBtn.disabled = true;
        
        // Add message to chat immediately for better UX
        const messageHtml = `
            <div class="message-wrapper animate-slide-in-bottom">
                <div class="chat-message own" id="msg-${frontEndMsgId}">
                    <div class="message-content">
                        <div class="message-bubble own">
                            <div class="message-text">${await utils.parseMD(utils.removeXSS(text))}</div>
                            <div class="message-time">Enviando...</div>
                        </div>
                    </div>
                    <img class="message-avatar own" src="{{user.avatar}}" alt="{{user.name}}">
                </div>
            </div>
        `;
        
        const container = getOrCreateMessagesContainer();
        if (!container) {
            console.error('No messages container available to insert message.');
            return;
        }
        container.insertAdjacentHTML('beforeend', messageHtml);
        scrollToBottom();
        
        try {
            const response = await fetch('/api/users/{{target.id}}/messages', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "authorization": "User {{user.id}}"
                },
                body: JSON.stringify({ content: text, frontEndMsgId })
            });
            
            if (response.ok) {
                // Update message status to sent
                const messageEl = document.querySelector(`#msg-${frontEndMsgId} .message-time`);
                if (messageEl) messageEl.textContent = new Date().toLocaleTimeString();
            } else {
                // Handle error
                UIManager.showToast('Error al enviar el mensaje', 'error');
                document.querySelector(`#msg-${frontEndMsgId}`).remove();
            }
        } catch (error) {
            UIManager.showToast('Error de conexión', 'error');
            document.querySelector(`#msg-${frontEndMsgId}`).remove();
        } finally {
            sendBtn.innerHTML = originalIcon;
            sendBtn.disabled = false;
            input.focus();
        }
    }

    // Initialize chat functionality
    document.addEventListener('DOMContentLoaded', () => {
        const chatInput = document.getElementById('chat-input-text');
        const sendBtn = document.getElementById('chat-input-button');
        const chatMessages = document.querySelector('.chat-messages');
        const scrollTopBtn = document.getElementById('scroll-top');
        const scrollBottomBtn = document.getElementById('scroll-bottom');

        // Auto-scroll to bottom on load
        setTimeout(() => scrollToBottom(false), 100);

        // Send message on Enter key
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Send button click
        sendBtn.addEventListener('click', sendMessage);

        // Scroll navigation
        if (chatMessages) {
            chatMessages.addEventListener('scroll', () => {
                const { scrollTop, scrollHeight, clientHeight } = chatMessages;
                
                // Show/hide scroll buttons
                if (scrollTop > 100) {
                    scrollTopBtn.classList.add('show');
                } else {
                    scrollTopBtn.classList.remove('show');
                }
                
                if (scrollHeight - scrollTop - clientHeight > 100) {
                    scrollBottomBtn.classList.add('show');
                } else {
                    scrollBottomBtn.classList.remove('show');
                }
            });
        }

        // Scroll button functionality
        scrollTopBtn?.addEventListener('click', () => {
            chatMessages.scrollTo({ top: 0, behavior: 'smooth' });
        });

        scrollBottomBtn?.addEventListener('click', () => {
            scrollToBottom();
        });

        // AI toggle functionality
        const aiToggle = document.getElementById('ai-input-btn');
        if (aiToggle) {
            aiToggle.addEventListener('change', (e) => {
                ai_status = e.target.checked;
                UIManager.showToast(
                    ai_status ? 'IA activada' : 'IA desactivada', 
                    ai_status ? 'success' : 'info'
                );
            });
        }

        // Socket setup
        if (typeof socket !== 'undefined') {
            socket.emit("set-chat", "{{target.id}}");
            
            // Listen for new messages
            socket.on("message", (data) => {
                if (data.currentChat) {
                    const messageHtml = `
                        <div class="message-wrapper animate-slide-in-bottom">
                            <div class="chat-message">
                                <img class="message-avatar" src="${data.user.avatar}" alt="${data.user.name}">
                                <div class="message-content">
                                    <div class="message-header">
                                        <span class="message-author">${data.user.username}</span>
                                        <span class="message-time">${new Date().toLocaleTimeString()}</span>
                                    </div>
                                    <div class="message-bubble">
                                        <div class="message-text">${data.content}</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    const container = getOrCreateMessagesContainer();
                    if (container) {
                        container.insertAdjacentHTML('beforeend', messageHtml);
                    }
                    scrollToBottom();
                    
                    if (!focused) {
                        unreadMessages++;
                        const counter = document.getElementById('unread-counter');
                        const count = document.getElementById('unread-count');
                        if (counter && count) {
                            count.textContent = unreadMessages;
                            counter.style.display = 'flex';
                        }
                    }
                }
            });

            // Listen for typing events
            socket.on("typing", (data) => {
                if (data.user.username === "BarnieBot") {
                    updateAiTyping(data.isTyping);
                }
            });
        }

        // Window focus handling
        window.addEventListener('focus', () => {
            focused = true;
            unreadMessages = 0;
            const counter = document.getElementById('unread-counter');
            if (counter) counter.style.display = 'none';
        });

        window.addEventListener('blur', () => {
            focused = false;
        });

        // Voice input (placeholder)
        const voiceBtn = document.getElementById('voice-input');
        voiceBtn?.addEventListener('click', () => {
            UIManager.showToast('Función de voz próximamente', 'info');
        });

        // Attach button (placeholder)
        const attachBtn = document.querySelector('.attach-btn');
        attachBtn?.addEventListener('click', () => {
            UIManager.showToast('Función de archivos próximamente', 'info');
        });
    });

    // Auto-resize input
    const chatInput = document.getElementById('chat-input-text');
    if (chatInput) {
        chatInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });
    }
</script>